services:
  redis:
    image: redis:latest
    restart: always
    volumes:
      - ./redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - 6379:6379
    expose:
      - 6379

  postgres:
    image: postgres:latest
    restart: always
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_NON_ROOT_USER
      - POSTGRES_NON_ROOT_PASSWORD
    ports:
      - 5432:5432
    networks:
      - internalnet
    expose:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # mongodb:
  #   image: mongo
  #   volumes:
  #     - ./mongodb_data:/data/db
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=admin
  #     - MONGO_INITDB_ROOT_PASSWORD=admin
  #   ports:
  #     - 27017:27017
  #   expose:
  #     - 27017
  #   networks:
  #     - internalnet

  # tooljet:
  #   image: tooljet/try:latest
  #   volumes:
  #     - tooljet-data:/var/lib/postgresql/13/main
  #   ports:
  #     - 9080:80
  #   networks:
  #     - internalnet

  # percona:
  #   image: percona
  #   volumes:
  #     - ./percona_data:/var/lib/mysql
  #   environment:
  #     - MYSQL_ROOT_PASSWORD=root
  #   ports:
  #     - 3306:3306
  #   expose:
  #     - 3306
  #   networks:
  #     - internalnet

  # mssql:
  #   image: mcr.microsoft.com/mssql/server
  #   volumes:
  #     - ./mssql_data:/var/opt/mssql/data
  #   environment:
  #     - ACCEPT_EULA=Y
  #     - SA_PASSWORD=YourStrong!Passw0rd
  #   ports:
  #     - 1433:1433
  #   expose:
  #     - 1433
  #   networks:
  #     - internalnet

  # n8n:
  #   image: n8nio/n8n
  #   volumes:
  #     - ./n8n_data:/root/.n8n
  #   ports:
  #     - 5678:5678
  #   expose:
  #     - 5678
  #   networks:
  #     - internalnet
  #   environment:
  #     - DB_TYPE=postgresdb 
  #     - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
  #     - DB_POSTGRESDB_HOST=postgres
  #     - DB_POSTGRESDB_PORT=15432
  #     - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
  #     - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
  #   links:
  #     - postgres
  #   depends_on:
  #     postgres:
  #       condition: service_healthy

  rabbitmq:
    image: rabbitmq:latest
    restart: always
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    expose:
      - 5672
      - 15672
    networks:
      - internalnet
    environment:
      - RABBITMQ_DEFAULT_USER=username
      - RABBITMQ_DEFAULT_PASS=password
    labels:
      - "com.rabbitmq.server.add_user=username password"
      - "com.rabbitmq.server.add_user_tags=username administrator"
      - "com.rabbitmq.server.set_permissions=username \".*\" \".*\" \".*\""

  # nocodb:
  #   image: nocodb/nocodb
  #   volumes:
  #     - ./nocodb_data:/usr/src/app/data
  #   ports:
  #     - 8080:8080
  #   networks:
  #     - internalnet

  grist-core:
    build: 
      context: .
      dockerfile: custom-builds/grist/Dockerfile
    restart: always
    volumes:
      - ./grist_data:/data
    command: ""
    ports:
      - 8484:8484
    expose:
      - 8484
    environment:
      - OPENAI_API_KEY={OPENAI_API_KEY}
      - GRIST_TELEMETRY_LEVEL=off
      - GRIST_BOOT_KEY=secret
      - PYTHON_VERSION=3
      - ASSISTANT_MODEL=gpt-4
      - TYPEORM_DATABASE=grist
      - TYPEORM_HOST=postgres
      - TYPEORM_TYPE=postgres
      - TYPEORM_PORT=5432
      - TYPEORM_USERNAME=${POSTGRES_USER}
      - TYPEORM_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    dns:
      - 8.8.8.8
      - 192.168.1.1
    networks:
      - internalnet

networks:
  internalnet:
    driver: bridge

volumes:
  tooljet-data:
  rabbitmq_data:
